import { Schema, Types, Document, model } from 'mongoose';
import { Attachment, Location, PriorityLevel, Reward, Reminder, rewardSchema, attachmentSchema, reminderSchema } from './plans-shared';

export enum InteractionMode {
    CALL = 'call',
    TEXT = 'text',
    EMAIL = 'email',
    IN_PERSON = 'in_person',
    VIDEO = 'video',
    QR_SCAN = 'qr_scan',
    NFC = 'nfc',
    CHAT = 'chat',
    COMMENT = 'comment',
    LIKE = 'like',
    SOCIAL_MEDIA = 'social_media',
    CONNECTION = 'connection'
}

export enum InteractionCategory {
    PERSONAL = 'personal',
    WORK = 'work',
    FAMILY = 'family',
    FRIENDS = 'friends',
    BUSINESS = 'business',
    NETWORKING = 'networking'
}

export enum InteractionStatus {
    UPCOMING = 'upcoming',
    IN_PROGRESS = 'in-progress',
    COMPLETED = 'completed',
    CANCELLED = 'cancelled'
}
//




interface IInteraction extends Document {
    title: string;
    profile: Types.ObjectId;
    targetProfile: Types.ObjectId;
    relationship: Types.ObjectId;
    lastContact: Date;
    nextContact?: Date;
    frequency?: string;
    color: string;
    priority: PriorityLevel;
    reward?: Reward;
    mode: InteractionMode;
    notes?: string;
    status: InteractionStatus;
    attachments: Attachment[];
    location: Location;
    category: InteractionCategory;
    reminders: Reminder[];
    isPhysical: boolean;
    isAutoGenerated: boolean;
    createdBy: Types.ObjectId;
    context?: {
        entityType?: string;
        entityId?: string;
        action?: string;
        content?: string;
        metadata?: Record<string, any>;
    };
    createdAt: Date;
    updatedAt: Date;
}

const InteractionSchema = new Schema<IInteraction>({
    title: {
        type: String,
        required: true,
        default: 'New Interaction'
    },
    profile: {
        type: Schema.Types.ObjectId,
        ref: 'Profile',
        required: true
    },
    targetProfile: {
        type: Schema.Types.ObjectId,
        ref: 'Profile',
        required: true
    },
    relationship: {
        type: Schema.Types.ObjectId,
        ref: 'Profile',
        required: true
    },
    lastContact: {
        type: Date,
        required: true,
        default: Date.now
    },
    nextContact: {
        type: Date
    },
    frequency: {
        type: String,
        enum: ['None', 'Daily', 'Weekly', 'Monthly', 'Yearly', 'Custom'],
        default: 'None'
    },
    color: {
        type: String,
        default: '#1DA1F2'
    },
    priority: {
        type: String,
        enum: Object.values(PriorityLevel),
        default: PriorityLevel.Low
    },
    reward: {
        type: rewardSchema,
        default: null
    },
    mode: {
        type: String,
        enum: Object.values(InteractionMode),
        required: true,
        default: InteractionMode.IN_PERSON
    },
    status: {
        type: String,
        enum: Object.values(InteractionStatus),
        default: InteractionStatus.UPCOMING
    },
    notes: {
        type: String,
        default: ''
    },
    attachments: {
        type: [attachmentSchema],
        default: []
    },
    location: {
        physicalLocation: {
            type: Boolean,
            default: false
        },
        address: {
            type: String,
            default: ''
        },
        coordinates: {
            lat: { type: Number },
            lng: { type: Number }
        }
    },
    category: {
        type: String,
        enum: Object.values(InteractionCategory),
        required: true,
        default: InteractionCategory.PERSONAL
    },
    reminders: {
        type: [reminderSchema],
        default: []
    },
    isPhysical: {
        type: Boolean,
        default: false
    },
    isAutoGenerated: {
        type: Boolean,
        default: false
    },
    createdBy: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    context: {
        type: {
            entityType: String,
            entityId: String,
            action: String,
            content: String,
            metadata: Schema.Types.Mixed
        },
        default: null
    }
}, { 
    timestamps: true 
});

// Add instance methods
InteractionSchema.methods.updateContact = function (newDate: Date): void {
    this.lastContact = new Date();
    this.nextContact = newDate;
    this.updatedAt = new Date();
};

InteractionSchema.methods.changeRelationship = function (newRelationship: Types.ObjectId): void {
    this.relationship = newRelationship;
    this.updatedAt = new Date();
};


const Interaction = model<IInteraction>('Interaction', InteractionSchema);

export { IInteraction, Interaction };
